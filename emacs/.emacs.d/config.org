#+TITLE: An Emacs Config
#+AUTHOR: Ryan Swift
#+DESCRIPTION: My personal emacs config. Draws heavily from [[https://gitlab.com/dwt1/configuring-emacs/-/blob/main/02-fixing-org-sudo-edit/config.org?plain=1][DT's config]]
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle yes

* TABLE OF CONTENTS :TOC:
- [[#core-components][CORE COMPONENTS]]
  - [[#straightel-package-manager][Straight.el Package Manager]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#buffer-move][BUFFER-MOVE]]
- [[#code-editing][CODE EDITING]]
  - [[#indent-bars][Indent Bars]]
  - [[#elpy][Elpy]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
  - [[#dim-inactive-buffers][Dim Inactive Buffers]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#modeline][MODELINE]]
  - [[#spaceline][Spaceline]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#sudo-edit][SUDO EDIT]]
- [[#theme][THEME]]
- [[#emacs-utils][EMACS UTILS]]
  - [[#auto-tangle-on-save][Auto-Tangle on Save]]
- [[#which-key][WHICH-KEY]]

* CORE COMPONENTS
** Straight.el Package Manager
*** Install
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Configure Use-Package
#+begin_src emacs-lisp
(use-package straight
  :custom
  (straight-use-package-by-default t))
#+end_src

** Evil Mode
#+begin_src emacs-lisp
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
#+end_src

** General Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    ;; set up 'SPC' as the global leader key
    (general-create-definer leader-key
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

    (leader-key
      "." '(find-file :wk "Find file")
      "f" '(:ignore t :wk "file")
      "f c" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :wk "Edit emacs config")

      "TAB" '(:ignore t :wk "line")
      "TAB TAB" '(comment-line :wk "Comment lines")

      "b" '(:ignore t :wk "Buffer")
     "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")

      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate an elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region") 

      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :wk "Reload emacs config")
      ;; "h r r" '(reload-init-file :wk "Reload emacs config")

      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines")

      "w" '(:ignore t :wk "Window")
      "w c" '(evil-window-delete :wk "Close window")
      "w o" '(delete-other-windows :wk "Leave only this window")
      "w h" '(evil-window-right :wk "Focus window right")
      "w j" '(evil-window-down :wk "Focus window down")
      "w k" '(evil-window-up :wk "Focus window up")
      "w l" '(evil-window-left :wk "Focus window left")
      )
  )
#+end_src


* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el
#+begin_src emacs-lisp
(require 'windmove)
;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* CODE EDITING
** Indent Bars
Show bars for indent alignment
#+begin_src emacs-lisp
  (use-package indent-bars
    :hook ((python-mode yaml-mode) . indent-bars-mode)) 
#+end_src
** Elpy
Python IDE features for Emacs
#+begin_src emacs-lisp
  (use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src


* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "JetBrains Mono Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono Nerd Font"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
 ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)
  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono Nerd Font-11"))
  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


* GUI TWEAKS
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (global-visual-line-mode t)
#+end_src

** Dim Inactive Buffers
#+begin_src emacs-lisp
   (use-package dimmer
     :config
     (dimmer-configure-which-key)
     (dimmer-configure-helm)
     (dimmer-mode t))
#+end_src


* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src

* MODELINE
** Spaceline
Use the modeline from Spacemacs
#+begin_src emacs-lisp
  (use-package spaceline
    :config
    (spaceline-emacs-theme))

#+end_src


* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-mode))
  ;; (setq org-export-with-toc t)
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src


* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (leader-key
      "f u" '(sudo-edit-find-file :wk "Sudo find file")
      "f U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* THEME
The first of the two lines below designates the directory where will place all of our themes.  The second line loads our chosen theme which is *dtmacs*, a theme that I created with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'eh t)
#+end_src


* EMACS UTILS
** Auto-Tangle on Save
#+BEGIN_SRC emacs-lisp
(defun my-org-babel-tangle-config ()
  "Tangle config.org when it's saved."
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/config.org")) ;; Adjust path as needed
    (org-babel-tangle-file (buffer-file-name))))

(add-hook 'after-save-hook #'my-org-babel-tangle-config)
#+END_SRC

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
      (add-hook 'which-key-mode-hook
          (lambda ()
            (display-line-numbers-mode -1)))
    :config
    (setq which-key-side-window-location 'bottom
  	  which-key-sort-order #'which-key-key-order-alpha
  	  which-key-sort-uppercase-first nil
  	  which-key-add-column-padding 1
  	  which-key-max-display-columns nil
  	  which-key-min-display-lines 6
  	  which-key-side-window-slot -10
  	  which-key-side-window-max-height 0.35
  	  which-key-idle-delay 0.8
  	  which-key-max-description-length 25
  	  ;; which-key-allow-imprecise-window-fit t
  	  which-key-separator " → " ))
#+end_src
